x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: ./Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:$POSTGRES_PASSWORD@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:$POSTGRES_PASSWORD@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: '' #$FERNET_KEY # enviroment variable for Fernet Key
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth # Basic authentication (upgrade in production)
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./config:/opt/airflow/config
    - ./plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD # enviroment variable
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      start_period: 15s
      interval: 5s
      retries: 3
      timeout: 5s
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    restart: unless-stopped
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/{logs,dags,plugins}
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins}
        # Wati until postgres is ready
        until pg_isready -U airflow -h postgres -p 5432; do
          echo "Waiting for Postgres..."
          sleep 5
        done

        airflow db migrate
        echo "Creating admin user..."
        airflow users create \
        --username airflow \
        --password $AIRFLOW_WWW_USER_PASSWORD \
        --role Admin \
        --email $EMAIL_ADMIN \
        --firstname macapa \
        --lastname User
        echo "Airflow init completed."
        airflow version #exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      AIRFLOW_WWW_USER_PASSWORD: $AIRFLOW_WWW_USER_PASSWORD
    volumes:
      - .:/opt/airflow


  minio:
    image: minio/minio
    container_name: mlflow_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    # networks:
    #   - airflow-mlflow-network
    restart: unless-stopped

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_ACCESS_KEY: ${MINIO_SECRET_ACCESS_KEY}
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      if ! mc ls myminio/mlflow; then
        mc mb myminio/mlflow
      else
        echo 'bucket mlflow already exists'
      fi &&
      if ! mc ls myminio/data; then
        mc mb myminio/data
      else
        echo 'bucket data already exists'
      fi
      "

  # mlflowdb:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_USER: mlflow
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_MLFLOW}
  #     POSTGRES_DB: mlflow
  #   volumes:
  #     - mlflowdb-volume:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U mlflow -d mlflow"]
  #     start_period: 15s
  #     interval: 5s
  #     retries: 3
  #     timeout: 5s
  #   restart: unless-stopped

  tracking_server:
    #image: ghcr.io/mlflow/mlflow:v2.21.0
    build:
      context: .
      dockerfile: ./mlflow/Dockerfile.tracking_server
    ports:
      - "5000:5000"
       
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_PORT}
      - MLFLOW_S3_IGNORE_TLS=true
      
    # command: > #postgres database
    #   mlflow server 
    #   --backend-store-uri 
    #   postgresql://mlflow:${POSTGRES_PASSWORD_MLFLOW}@mlflowdb/mlflow  
    #   --host 0.0.0.0 
    #   --port 500
    #   --serve-artifacts
    #   --artifacts-destination s3://${MINIO_BUCKET_NAME}
   
    command: > #local database Sqlite
      mlflow server 
      --backend-store-uri 
      sqlite:///mlruns.db
      --artifacts-destination s3://${MINIO_BUCKET_NAME}
      --host 0.0.0.0 
      --port 5000

    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000/health"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 15s
    depends_on:
      postgres:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
  minio-data:
  # mlflowdb-volume:

